{"version":3,"sources":["webpack:///webpack/bootstrap 96996d5104276a104c51","webpack:///./src/Map.ts","webpack:///./src/Renderer.ts","webpack:///./src/Scene.ts","webpack:///./src/Loop.ts","webpack:///./src/Time.ts","webpack:///./src/Mouse.ts","webpack:///./src/Keyboard.ts","webpack:///./src/Screen.ts","webpack:///./src/Loader.ts","webpack:///./src/State.ts","webpack:///./src/VirtualContext.ts","webpack:///./src/index.ts","webpack:///./src/Game.ts","webpack:///./src/GameObject.ts","webpack:///./src/Keys.ts"],"names":[],"mappings":"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","file":"rythmoos-engine.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 96996d5104276a104c51","/**\r\n * A collection with a non-indexed key.<br>\r\n * Useful to store a set of objects of the same type.\r\n */\r\nexport class Map<T> {\r\n  private _keys: string[];\r\n  private _values: T[];\r\n\r\n  constructor() {\r\n    this._keys = [];\r\n    this._values = [];\r\n  }\r\n\r\n  /**\r\n   * Get an object from the map.\r\n   * @param key The name of the object to get.\r\n   * @return The object, or null if the object does not exist in the map.\r\n   */\r\n  public get(key: string): T|null {\r\n    const index = this._keys.indexOf(key);\r\n\r\n    if (index !== -1) {\r\n      return this._values[index];\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Add or update an object.\r\n   * @param key The name of the object to set.\r\n   * @param value The value to set for this object.\r\n   */\r\n  public set(key: string, value: T): void {\r\n    const index = this._keys.indexOf(key);\r\n\r\n    if (index !== -1) {\r\n      this._values[index] = value;\r\n    } else {\r\n      this._keys.push(key);\r\n      this._values.push(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an object from the map.\r\n   * @param key The object's name to be removed from the map.\r\n   * @return True if the object was removed, false if the object was not found.\r\n   */\r\n  public remove(key: string): boolean {\r\n    const index = this._keys.indexOf(key);\r\n\r\n    if (index !== -1) {\r\n      this._keys.splice(index, 1);\r\n      this._values.splice(index, 1);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get an array containing all the objects of the map.\r\n   */\r\n  public getAll(): T[] {\r\n    return [...this._values];\r\n  }\r\n\r\n  /**\r\n   * Clear the map by removing all the keys and values that it stores.\r\n   */\r\n  public removeAll() {\r\n    this._keys = [];\r\n    this._values = [];\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Map.ts","import {Scene} from './Scene';\r\n\r\n/**\r\n * The renderer is used to render graphics to a canvas.<br>\r\n * Any game instance comes bundled with a renderer already.\r\n */\r\nexport class Renderer {\r\n  private _context: CanvasRenderingContext2D;\r\n\r\n  /**\r\n   * Create a Renderer.\r\n   * @param context The context of the canvas to render to.\r\n   */\r\n  constructor(context: CanvasRenderingContext2D) {\r\n    this._context = context;\r\n  }\r\n\r\n  /**\r\n   * Render a scene to the canvas.\r\n   * @param scene The scene to render.\r\n   */\r\n  public render(scene: Scene): void {\r\n    this._context.fillStyle = '#000000';\r\n    this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);\r\n    scene._runRender(this._context);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Renderer.ts","import {IUpdatable} from './IUpdatable';\r\nimport {IRenderable} from './IRenderable';\r\nimport {IRunnable} from './IRunnable';\r\nimport {Map} from './Map';\r\nimport {GameObject} from './GameObject';\r\n\r\n/**\r\n * A scene contains all the game objects in a specific \"word\" of your game.<br>\r\n * For example, you may have a \"MainScreen\" scene that will contain everything\r\n * that is in the main screen of your game.<br>\r\n * You could then have a \"Level1\" scene that will contain the level 1 of you game. etc.\r\n */\r\nexport class Scene extends Map<GameObject> implements IUpdatable, IRunnable {\r\n  constructor() {\r\n    super();\r\n\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * Called the the scene is created.<br>\r\n   * You can set your game objects (UI, characters, music, etc) from here.\r\n   */\r\n  public create(): void {\r\n  }\r\n\r\n  /**\r\n   * Run every frame to update the scene.<br>\r\n   * This is useful when you want an update to run as long as your scene is\r\n   * being rendered, independently from the game objects it contains.\r\n   */\r\n  public update(): void {\r\n  }\r\n\r\n  /**\r\n   * Used internally to update the scene and its game objects.\r\n   */\r\n  public _runUpdate() {\r\n    this.update();\r\n\r\n    for (const gameObject of this.getAll()) {\r\n      gameObject.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used internally by the renderer to render the scene.\r\n   * @param context The renderer's context, automatically passed in.\r\n   */\r\n  public _runRender(context: CanvasRenderingContext2D): void {\r\n    for (const gameObject of this.getAll()) {\r\n      context.save();\r\n      gameObject.render(context);\r\n      context.restore();\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Scene.ts","import {Time} from './Time';\r\n\r\n/**\r\n * Used internally to run the game.\r\n */\r\nexport abstract class Loop {\r\n  private static _animationFrame: number = 0;\r\n  private static _callback: Function;\r\n  \r\n  public static start(callback: Function): void {\r\n    if (this._animationFrame === 0) {\r\n      this._callback = callback;\r\n      this._animationFrame = window.requestAnimationFrame((frame: number) => {\r\n        this._update(frame);\r\n      });\r\n    }\r\n  }\r\n\r\n  public static stop(): void {\r\n    if (this._animationFrame !== 0) {\r\n      window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = 0;\r\n    }\r\n  }\r\n\r\n  private static _update(frame: number): void {\r\n    this._animationFrame = window.requestAnimationFrame((frame: number) => {\r\n      this._update(frame);\r\n    });\r\n\r\n    Time._setFrame(frame);\r\n\r\n    this._callback();\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Loop.ts","/**\r\n * Store time values and make them easy to access from anywhere\r\n * in your game just by importing this static class.\r\n */\r\nexport abstract class Time {\r\n  private static _deltaTime: number = 0;\r\n  private static _time: number = 0;\r\n\r\n  /**\r\n   * Used internally to update the time data.\r\n   * @param frame The total time elapsed in milliseconds, passed in by the browser.\r\n   */\r\n  public static _setFrame(frame: number): void {\r\n    this._deltaTime = frame - this._time;\r\n    this._time = frame;\r\n  }\r\n\r\n  /**\r\n   * The time elapsed since the last frame, in milliseconds.<br>\r\n   * Useful for smooth animations that will run at the same speed regardless\r\n   * of the rendering speed.\r\n   */\r\n  public static get deltaTime(): number {\r\n    return this._deltaTime;\r\n  }\r\n\r\n  /**\r\n   * The time elapsed since the game has started being rendered, in milliseconds.\r\n   */\r\n  public static get time(): number {\r\n    return this._time;\r\n  }\r\n\r\n  /**\r\n   * The deltaTime in second. Useful for animations.<br>\r\n   * Let's say we want our gameObject.x property to move 10 pixels per second, we can do that:\r\n   * gameObject.x += 10 * Time.second;\r\n   */\r\n  public static get second(): number {\r\n    return 1 / this._deltaTime;\r\n  }\r\n\r\n  /**\r\n   * The average amount of frames per second based on the current deltaTime.\r\n   */\r\n  public static get FPS(): number {\r\n    return 1000 / this._deltaTime;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Time.ts","import {IUpdatable} from './IUpdatable';\r\n\r\n/**\r\n * Map the mouse input.\r\n */\r\nexport abstract class Mouse {\r\n  private static _cursorX: number = 0;\r\n  private static _cursorY: number = 0;\r\n  private static _movementX: number = 0;\r\n  private static _movementY: number = 0;\r\n  private static _leftButton: boolean = false;\r\n  private static _leftClick: boolean = false;\r\n  private static _middleButton: boolean = false;\r\n  private static _middleClick: boolean = false;\r\n  private static _rightButton: boolean = false;\r\n  private static _rightClick: boolean = false;\r\n  private static _scrollX: number = 0;\r\n  private static _scrollY: number = 0;\r\n\r\n  /**\r\n   * The X position of the cursor in the window.\r\n   */\r\n  public static get cursorX(): number {\r\n    return this._cursorX;\r\n  }\r\n\r\n  /**\r\n   * The Y position of the cursor in the window.\r\n   */\r\n  public static get cursorY(): number {\r\n    return this._cursorY;\r\n  }\r\n\r\n  /**\r\n   * The cursor movement in the X axis, in pixels.\r\n   */\r\n  public static get movementX(): number {\r\n    return this._movementX;\r\n  }\r\n\r\n  /**\r\n   * The cursor movement in the Y axis, in pixels.\r\n   */\r\n  public static get movementY(): number {\r\n    return this._movementY;\r\n  }\r\n\r\n  /**\r\n   * Whether the left button is down or not.\r\n   */\r\n  public static get leftButtonDown(): boolean {\r\n    return this._leftButton;\r\n  }\r\n\r\n  /**\r\n   * Whether the middle (wheel) button is down or not.\r\n   */\r\n  public static get middleButtonDown(): boolean {\r\n    return this._middleButton;\r\n  }\r\n\r\n  /**\r\n   * Whether the right button is down or not.\r\n   */\r\n  public static get rightButtonDown(): boolean {\r\n    return this._rightButton;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when a left click occurs.\r\n   */\r\n  public static get leftClick(): boolean {\r\n    return this._leftClick;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when a middle (wheel) click occurs.\r\n   */\r\n  public static get middleClick(): boolean {\r\n    return this._middleClick;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when a right click occurs.\r\n   */\r\n  public static get rightClick(): boolean {\r\n    return this._rightClick;\r\n  }\r\n\r\n  /**\r\n   * The scroll movement in the X axis.<br>\r\n   * Possible values: -1 (scroll to -x), 0 (no scroll x), 1 (scroll to +x).\r\n   */\r\n  public static get scrollX(): number {\r\n    return this._scrollX;\r\n  }\r\n\r\n  /**\r\n   * The scroll movement in the Y axis.<br>\r\n   * Possible values: -1 (scroll to -y), 0 (no scroll y), 1 (scroll to +y).\r\n   */\r\n  public static get scrollY(): number {\r\n    return this._scrollY;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when the user is scrolling up.\r\n   */\r\n  public static get scrollUp(): boolean {\r\n    return this._scrollY === -1;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when the user is scrolling down.\r\n   */\r\n  public static get scrollDown(): boolean {\r\n    return this._scrollY === 1;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when the user is scrolling left.\r\n   */\r\n  public static get scrollLeft(): boolean {\r\n    return this._scrollX === -1;\r\n  }\r\n\r\n  /**\r\n   * Evaluate to true when the user is scrolling right.\r\n   */\r\n  public static get scrollRight(): boolean {\r\n    return this._scrollY === 1;\r\n  }\r\n\r\n  /**\r\n   * Used internally to initialise the mouse input.\r\n   * @param canvas The game's canvas.\r\n   */\r\n  public static _init(canvas: HTMLCanvasElement) {\r\n    canvas.addEventListener('mousemove', e => {\r\n      this._cursorX = e.clientX - canvas.offsetLeft;\r\n      this._cursorY = e.clientY - canvas.offsetTop;\r\n      this._movementX = e.movementX;\r\n      this._movementY = e.movementY;\r\n    });\r\n\r\n    canvas.addEventListener('mousedown', e => {\r\n      e.preventDefault();\r\n\r\n      switch (e.button) {\r\n        case 0:\r\n          this._leftButton = true;\r\n          this._leftClick = true;\r\n          break;\r\n        case 1:\r\n          this._middleButton = true;\r\n          this._middleClick = true;\r\n          break;\r\n        case 2:\r\n          this._rightButton = true;\r\n          this._rightClick = true;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      window.addEventListener('mouseup', e => {\r\n        if (!this._leftButton || !this._middleButton || !this._rightButton) return;\r\n\r\n        e.preventDefault();\r\n\r\n        switch (e.button) {\r\n          case 0:\r\n            this._leftButton = false;\r\n            break;\r\n          case 1:\r\n            this._middleButton = false;\r\n            break;\r\n          case 2:\r\n            this._rightButton = false;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      canvas.addEventListener('contextmenu', e => {\r\n        e.preventDefault();\r\n      });\r\n\r\n      window.addEventListener('wheel', e => {\r\n        e.preventDefault();\r\n\r\n        if (e.deltaX > 0) {\r\n          this._scrollX = 1;\r\n        } else if (e.deltaX < 0) {\r\n          this._scrollX = -1;\r\n        } else {\r\n          this._scrollX = 0;\r\n        }\r\n\r\n        if (e.deltaY > 0) {\r\n          this._scrollY = 1;\r\n        } else if (e.deltaY < 0) {\r\n          this._scrollY = -1;\r\n        } else {\r\n          this._scrollY = 0;\r\n        }\r\n      });\r\n\r\n      window.addEventListener('blur', () => {\r\n        this._leftButton = false;\r\n        this._middleButton = false;\r\n        this._rightButton = false;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used internally to update the mouse input states.\r\n   */\r\n  public static _update(): void {\r\n    this._movementX = 0;\r\n    this._movementY = 0;\r\n    this._scrollX = 0;\r\n    this._scrollY = 0;\r\n    this._leftClick = false;\r\n    this._middleClick = false;\r\n    this._rightClick = false;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Mouse.ts","import {Map} from './Map';\r\nimport {Keys} from './Keys';\r\n\r\n/**\r\n * Map the keyboard and the state of each keys.\r\n */\r\nexport abstract class Keyboard {\r\n  /** Whether to prevent the default key action or not. Defaults to false. */\r\n  public static preventDefault: boolean;\r\n  private static _keys: Map<boolean>;\r\n  private static _pressed: Keys[];\r\n  private static _lastKey: Keys|null;\r\n\r\n  /**\r\n   * Check if a key is down.\r\n   * @param key The key to check.\r\n   */\r\n  public static keyDown(key: Keys): boolean {\r\n    return this._keys.get(key) || false;\r\n  }\r\n\r\n  /**\r\n   * Check if a key is pressed (fires only when the key is clicked).\r\n   * @param key The key to check.\r\n   */\r\n  public static keyPressed(key: Keys): boolean {\r\n    return this._pressed.indexOf(key) !== -1;\r\n  }\r\n\r\n  /**\r\n   * Get the last key that was pressed.<br>\r\n   * Can for example be used in a settings menu when asking the user the desired\r\n   * key-binding.<br>\r\n   * The value is reset to null or to the new last key each frame.\r\n   * @return The last key pressed, or null if no key was previously pressed.\r\n   */\r\n  public static lastKey(): Keys|null {\r\n    return this._lastKey;\r\n  }\r\n\r\n  /**\r\n   * Used internally to initialise the keyboard input.\r\n   */\r\n  public static _init() {\r\n    this.preventDefault = false;\r\n    this._keys = new Map<boolean>();\r\n    this._pressed = [];\r\n    this._lastKey = null;\r\n\r\n    window.addEventListener('keydown', e => {\r\n      if (this.preventDefault) e.preventDefault();\r\n\r\n      this._keys.set(e.code, true);\r\n      this._pressed.push(<Keys>e.code);\r\n      this._lastKey = <Keys>e.code;\r\n    });\r\n\r\n    window.addEventListener('keyup', e => {\r\n      if (this.preventDefault) e.preventDefault();\r\n\r\n      this._keys.set(e.code, false);\r\n    });\r\n\r\n    window.addEventListener('keypress', e => {\r\n      if (this.preventDefault) e.preventDefault();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used internally to update the keyboard's keys state.\r\n   */\r\n  public static _update() {\r\n    this._pressed = [];\r\n    this._lastKey = null;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Keyboard.ts","/**\r\n * This class represent the game's screen (canvas).<br>\r\n * It makes it easy to access the width, height and offsets properties of the\r\n * game's screen from anywhere in your game.\r\n */\r\nexport abstract class Screen {\r\n  private static _canvas: HTMLCanvasElement;\r\n\r\n  /**\r\n   * The width of the game's canvas.\r\n   */\r\n  public static get width(): number {\r\n    return this._canvas.width;\r\n  }\r\n\r\n  /**\r\n   * The height of the game's canvas.\r\n   */\r\n  public static get height(): number {\r\n    return this._canvas.height;\r\n  }\r\n\r\n  /**\r\n   * The offset width of the game's canvas.\r\n   */\r\n  public static get offsetWidth(): number {\r\n    return this._canvas.offsetWidth\r\n  }\r\n\r\n  /**\r\n   * The offset height of the game's canvas.\r\n   */\r\n  public static get offsetHeight(): number {\r\n    return this._canvas.offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * The offset left of the game canvas.\r\n   */\r\n  public static get offsetX(): number {\r\n    return this._canvas.offsetLeft;\r\n  }\r\n\r\n  /**\r\n   * The offset top of the game canvas.\r\n   */\r\n  public static get offsetY(): number {\r\n    return this._canvas.offsetTop;\r\n  }\r\n\r\n  /**\r\n   * Used internally to initialise the Screen class.\r\n   * @param canvas The game's canvas.\r\n   */\r\n  public static _init(canvas: HTMLCanvasElement): void {\r\n    this._canvas = canvas;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Screen.ts","import {Map} from './Map';\r\nimport {Game} from './Game';\r\n\r\n/**\r\n * The loader is an easy way to preload all the required assets for your game.<br>\r\n * You can use it from the load() method of your Game class.<br>\r\n * It can also be used while the game is running to load assets on the fly.\r\n */\r\nexport abstract class Loader {\r\n  /** The base path to the assets directory. */\r\n  public static basePath: string = '.';\r\n  private static _game: Game;\r\n  private static _loaded: boolean = false;\r\n  private static _images: Map<HTMLImageElement> = new Map<HTMLImageElement>();\r\n  private static _videos: Map<HTMLVideoElement> = new Map<HTMLVideoElement>();\r\n  private static _audios: Map<HTMLAudioElement> = new Map<HTMLAudioElement>();\r\n  private static _json: Map<object> = new Map<object>();\r\n  private static _files: Map<boolean> = new Map<boolean>();\r\n\r\n  /**\r\n   * Used internally to preload the game and its assets.\r\n   * @param game The game instance.\r\n   */\r\n  public static _init(game: Game): void {\r\n    this._game = game;\r\n\r\n    this._game.load();\r\n\r\n    if (this._files.getAll().length === 0) {\r\n      this._fileLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load an image file.\r\n   * @param fileName The name to save this file as in the loader.\r\n   * @param filePath The path to the file to load.\r\n   */\r\n  public static loadImage(fileName: string, filePath: string): void {\r\n    const image = document.createElement('img');\r\n\r\n    filePath = `${this.basePath}/${filePath}`;\r\n\r\n    this._images.set(fileName, image);\r\n    this._files.set(fileName, false);\r\n\r\n    image.addEventListener('load', () => {\r\n      this._files.set(fileName, true);\r\n\r\n      if (!this._loaded) this._fileLoaded();\r\n    });\r\n\r\n    image.addEventListener('error', () => {\r\n      console.log(`Could not load file: ${filePath}.`);\r\n    });\r\n\r\n    image.src = filePath;\r\n  }\r\n\r\n  /**\r\n   * Load a video file.\r\n   * @param fileName The name to save this file as in the loader.\r\n   * @param filePath The path to the file to load.\r\n   */\r\n  public static loadVideo(fileName: string, filePath: string): void {\r\n    const video = document.createElement('video');\r\n\r\n    filePath = `${this.basePath}/${filePath}`;\r\n\r\n    this._videos.set(fileName, video);\r\n    this._files.set(fileName, false);\r\n\r\n    video.addEventListener('loadeddata', () => {\r\n      this._files.set(fileName, true);\r\n\r\n      if (!this._loaded) this._fileLoaded();\r\n    });\r\n\r\n    video.addEventListener('error', () => {\r\n      console.log(`Could not load file: ${filePath}.`);\r\n    });\r\n\r\n    video.src = filePath;\r\n  }\r\n\r\n  /**\r\n   * Load an audio file.\r\n   * @param fileName The name to save this file as in the loader.\r\n   * @param filePath The path to the file to load.\r\n   */\r\n  public static loadAudio(fileName: string, filePath: string): void {\r\n    const audio = document.createElement('audio');\r\n\r\n    filePath = `${this.basePath}/${filePath}`;\r\n\r\n    this._audios.set(fileName, audio);\r\n    this._files.set(fileName, false);\r\n\r\n    audio.addEventListener('loadeddata', () => {\r\n      this._files.set(fileName, true);\r\n\r\n      if (!this._loaded) this._fileLoaded();\r\n    });\r\n\r\n    audio.addEventListener('error', () => {\r\n      console.log(`Could not load file: ${filePath}.`);\r\n    });\r\n\r\n    audio.src = filePath;\r\n  }\r\n\r\n  /**\r\n   * Load a json file.\r\n   * @param fileName The name to save this file as in the loader.\r\n   * @param filePath The path to the file to load.\r\n   */\r\n  public static loadJSON(fileName: string, filePath: string): void {\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    filePath = `${this.basePath}/${filePath}`;\r\n\r\n    this._json.set(fileName, {});\r\n    this._files.set(fileName, false);\r\n\r\n    xhr.addEventListener('load', () => {\r\n      this._files.set(fileName, true);\r\n      this._json.set(fileName, JSON.parse(xhr.responseText));\r\n\r\n      if (!this._loaded) this._fileLoaded();\r\n    });\r\n\r\n    xhr.addEventListener('error', () => {\r\n      console.log(`Could not load file: ${filePath}`);\r\n    });\r\n\r\n    xhr.open('GET', filePath, true);\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Get an image that was loaded.<br>\r\n   * If the image was loaded on the fly, it may not be ready yet! You can\r\n   * check whether the file was loaded or not using the loaded() method.\r\n   * @param fileName The name of the file to get.\r\n   * @return The image file, or null if the image was not loaded using loadImage().\r\n   */\r\n  public static image(fileName: string): HTMLImageElement|null {\r\n    return this._images.get(fileName);\r\n  }\r\n\r\n  /**\r\n   * Get a video that was loaded.<br>\r\n   * If the video was loaded on the fly, it may not be ready yet! You can\r\n   * check whether the file was loaded or not using the loaded() method.\r\n   * @param fileName The name of the file to get.\r\n   * @return The video file, or null if the video was not loaded using loadVideo().\r\n   */\r\n  public static video(fileName: string): HTMLVideoElement|null {\r\n    return this._videos.get(fileName);\r\n  }\r\n\r\n  /**\r\n   * Get a audio that was loaded.<br>\r\n   * If the audio was loaded on the fly, it may not be ready yet! You can\r\n   * check whether the file was loaded or not using the loaded() method.\r\n   * @param fileName The name of the file to get.\r\n   * @return The audio file, or null if the audio was not loaded using loadAudio().\r\n   */\r\n  public static audio(fileName: string): HTMLAudioElement|null {\r\n    return this._audios.get(fileName);\r\n  }\r\n\r\n  /**\r\n   * Get a JSON file that was loaded.<br>\r\n   * If the JSON file was loaded on the fly, it may not be ready yet! You can\r\n   * check whether the file was loaded or not using the loaded() method.\r\n   * @param fileName The name of the file to get.\r\n   * @return The parsed JSON file, or null if the JSON file was not loaded using loadJSON().\r\n   */\r\n  public static json(fileName: string): object|null {\r\n    return this._json.get(fileName);\r\n  }\r\n\r\n  /**\r\n   * Check whether a file is ready to be used or not.\r\n   * @param fileName The file to check.\r\n   */\r\n  public static loaded(fileName: string): boolean {\r\n    return this._files.get(fileName) || false;\r\n  }\r\n\r\n  private static _fileLoaded(): void {\r\n    if (this._files.getAll().indexOf(false) === -1) {\r\n      this._loaded = true;\r\n      this._game._start();\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Loader.ts","import {Map} from './Map';\r\n\r\n/**\r\n * The State class is used to store data that can be accessed throughout you game.<br>\r\n * For example, you can use it from a game object to update a state value, then\r\n * access this state value from the game update.<br>\r\n * Think of it as a big container available from anywhere you import it.\r\n */\r\nexport abstract class State {\r\n  private static _states: Map<any>;\r\n\r\n  /**\r\n   * Used internally to initialise the State class.\r\n   */\r\n  public static _init() {\r\n    this._states = new Map<any>();\r\n  }\r\n\r\n  /**\r\n   * Set (create or update) a state value.\r\n   * @param key The name of the state.\r\n   * @param value The value of the state.\r\n   */\r\n  public static set(key: string, value: any): void {\r\n    this._states.set(key, value);\r\n  }\r\n\r\n  /**\r\n   * Get a state value.\r\n   * @param key The name of the state.\r\n   * @return The value of the state, null if the state was not set.\r\n   */\r\n  public static get(key: string): any {\r\n    return this._states.get(key);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/State.ts","/**\r\n * A Canvas' 2D rendering context that is not rendered.<br>\r\n * Useful to work with ImageData objects, TextMetrics, to create bitmap data and\r\n * anything else a 2D context allows you to do.\r\n */\r\nexport abstract class VirtualContext {\r\n  private static _context: CanvasRenderingContext2D;\r\n  private static _width: number;\r\n  private static _height: number;\r\n\r\n  /**\r\n   * Used internally to initialise the virual context.\r\n   */\r\n  public static _init(): void {\r\n    this._context = <CanvasRenderingContext2D>document.createElement('canvas').getContext('2d');\r\n    this._width = 0;\r\n    this._height = 0;\r\n  }\r\n\r\n  /**\r\n   * Request the virtual context.\r\n   * @param width The width to request from the context.\r\n   * @param height The height to request from the context.\r\n   * @return The context object.\r\n   */\r\n  public static requestBuffer(width: number, height: number): CanvasRenderingContext2D {\r\n    this._context.restore();\r\n    this._context.clearRect(0, 0, this._width, this._height);\r\n    this._context.save();\r\n\r\n    this._width = width;\r\n    this._height = height;\r\n\r\n    return this._context;\r\n  }\r\n\r\n  /**\r\n   * Get the image data from an image object.\r\n   * @param image The image to get the data from.\r\n   * @param width The width of the image (defaults to the actual image's width).\r\n   * @param height The height of the image (defaults to the actual image's height).\r\n   */\r\n  public static getImageData(image: HTMLImageElement, width?: number, height?: number): ImageData {\r\n    width = width !== undefined ? width : image.width;\r\n    height = height !== undefined ? height : image.height;\r\n\r\n    const context = this.requestBuffer(width, height);\r\n\r\n    context.drawImage(image, 0, 0, width, height);\r\n\r\n    return context.getImageData(0, 0, width, height);\r\n  }\r\n\r\n  /**\r\n   * Get the width of a text with a specific font.\r\n   * @param text The text to measure.\r\n   * @param font The font to use.\r\n   */\r\n  public static measureText(text: string, font: string): number {\r\n    this._context.save();\r\n\r\n    this._context.font = font;\r\n    const textMeasure = this._context.measureText(text);\r\n\r\n    this._context.restore();\r\n\r\n    return textMeasure.width;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/VirtualContext.ts","export * from './Game';\r\nexport * from './GameObject';\r\nexport * from './IRenderable';\r\nexport * from './IRunnable';\r\nexport * from './IUpdatable';\r\nexport * from './Keyboard';\r\nexport * from './Keys';\r\nexport * from './Loader';\r\nexport * from './Loop';\r\nexport * from './Map';\r\nexport * from './Mouse';\r\nexport * from './Renderer';\r\nexport * from './Scene';\r\nexport * from './Screen';\r\nexport * from './State';\r\nexport * from './Time';\r\nexport * from './VirtualContext';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import {Renderer} from './Renderer';\r\nimport {Scene} from './Scene';\r\nimport {Loop} from './Loop';\r\nimport {IUpdatable} from './IUpdatable';\r\nimport {Mouse} from './Mouse';\r\nimport {Keyboard} from './Keyboard';\r\nimport {Screen} from './Screen';\r\nimport {Loader} from './Loader';\r\nimport {State} from './State';\r\nimport {VirtualContext} from './VirtualContext';\r\n\r\n/**\r\n * The base class of any game.\r\n */\r\nexport class Game implements IUpdatable {\r\n  /** The width of the game. */\r\n  public readonly width: number;\r\n  /** The height of the game. */\r\n  public readonly height: number;\r\n  /** The parent element of the game. */\r\n  public readonly container: HTMLElement;\r\n  /** The scene currently being rendered. */\r\n  public scene: Scene;\r\n  private _canvas: HTMLCanvasElement;\r\n  private _renderer: Renderer;\r\n  private _running: boolean;\r\n\r\n  /**\r\n   * Create a Game.\r\n   * @param width The width of the game.\r\n   * @param height The height of the game.\r\n   * @param container The HTML parent element for the game's canvas.\r\n   */\r\n  constructor(width: number, height: number, container: HTMLElement) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.container = container;\r\n    this.scene = new Scene();\r\n    this._canvas = document.createElement('canvas');\r\n    this._renderer = new Renderer(<CanvasRenderingContext2D>this._canvas.getContext('2d'));\r\n    this._running = false;\r\n\r\n    this._canvas.width = this.width;\r\n    this._canvas.height = this.height;\r\n    this.container.appendChild(this._canvas);\r\n\r\n    VirtualContext._init();\r\n    Screen._init(this._canvas);\r\n    Mouse._init(this._canvas);\r\n    Keyboard._init();\r\n    State._init();\r\n    Loader._init(this);\r\n  }\r\n\r\n  /**\r\n   * Called when the game is launched.<br>\r\n   * Useful for assets loading.\r\n   */\r\n  public load(): void {\r\n  }\r\n\r\n  /**\r\n   * Called when the game is ready to run, just before it starts.<br>\r\n   * You can set a scene and access the loaded assets safely from here.\r\n   */\r\n  public create(): void {\r\n  }\r\n\r\n  /**\r\n   * Called before rendering a frame.<br>\r\n   * You can specify things to run every frame as long as your game is running.\r\n   */\r\n  public update(): void {\r\n  }\r\n\r\n  /**\r\n   * Used internally to start the game.\r\n   */\r\n  public _start(): void {\r\n    if (this._running) return;\r\n\r\n    this._running = true;\r\n    this.create();\r\n\r\n    window.focus();\r\n\r\n    Loop.start(() => {\r\n      this.update();\r\n      this.scene._runUpdate();\r\n      this._renderer.render(this.scene);\r\n\r\n      Mouse._update();\r\n      Keyboard._update();\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Game.ts","import {IUpdatable} from './IUpdatable';\r\nimport {IRenderable} from './IRenderable';\r\n\r\n/**\r\n * A game object defines an entity in your game's world.<br>\r\n * It can be for example the player's character, a button, etc.\r\n */\r\nexport class GameObject implements IUpdatable, IRenderable {\r\n  constructor() {\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * Called when the game object is created.<br>\r\n   * You can set the game object's properties in here, use the loader\r\n   * to load textures, etc...\r\n   */\r\n  public create(): void {\r\n  }\r\n\r\n  /**\r\n   * Called every frame as long as the game object is in the active scene.<br>\r\n   * You can update your object property from here to, for example, move a\r\n   * character if a keyboard key is being pressed.\r\n   */\r\n  public update(): void {\r\n  }\r\n\r\n  /**\r\n   * Called every frame as long as the game object is in the active scene.<br>\r\n   * Render the game object to the screen using the renderer's 2D context.\r\n   * @param context The renderer's context, automatically passed in.\r\n   */\r\n  public render(context: CanvasRenderingContext2D): void {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/GameObject.ts","/**\r\n * Define all the keys available from the Keyboard class.\r\n */\r\nexport enum Keys {\r\n  Digit0 = 'Digit0',\r\n  Digit1 = 'Digit1',\r\n  Digit2 = 'Digit2',\r\n  Digit3 = 'Digit3',\r\n  Digit4 = 'Digit4',\r\n  Digit5 = 'Digit5',\r\n  Digit6 = 'Digit6',\r\n  Digit7 = 'Digit7',\r\n  Digit8 = 'Digit8',\r\n  Digit9 = 'Digit9',\r\n\r\n  KeyA = 'KeyA',\r\n  KeyB = 'KeyB',\r\n  KeyC = 'KeyC',\r\n  KeyD = 'KeyD',\r\n  KeyE = 'KeyE',\r\n  KeyF = 'KeyF',\r\n  KeyG = 'KeyG',\r\n  KeyH = 'KeyH',\r\n  KeyI = 'KeyI',\r\n  KeyJ = 'KeyJ',\r\n  KeyK = 'KeyK',\r\n  KeyL = 'KeyL',\r\n  KeyM = 'KeyM',\r\n  KeyN = 'KeyN',\r\n  KeyO = 'KeyO',\r\n  KeyP = 'KeyP',\r\n  KeyQ = 'KeyQ',\r\n  KeyR = 'KeyR',\r\n  KeyS = 'KeyS',\r\n  KeyT = 'KeyT',\r\n  KeyU = 'KeyU',\r\n  KeyV = 'KeyV',\r\n  KeyW = 'KeyW',\r\n  KeyX = 'KeyX',\r\n  KeyY = 'KeyY',\r\n  KeyZ = 'KeyZ',\r\n\r\n  Escape = 'Escape',\r\n\r\n  F1 = 'F1',\r\n  F2 = 'F2',\r\n  F3 = 'F3',\r\n  F4 = 'F4',\r\n  F5 = 'F5',\r\n  F6 = 'F6',\r\n  F7 = 'F7',\r\n  F8 = 'F8',\r\n  F9 = 'F9',\r\n  F10 = 'F10',\r\n  F11 = 'F11',\r\n  F12 = 'F12',\r\n\r\n  Insert = 'Insert',\r\n  Delete = 'Delete',\r\n\r\n  Home = 'Home',\r\n  End = 'End',\r\n  PageUp = 'PageUp',\r\n  PageDown = 'PageDown',\r\n\r\n  NumLock = 'NumLock',\r\n  NumpadDivide = 'NumpadDivide',\r\n  NumpadMultiply = 'NumpadMultiply',\r\n  NumpadSubtract = 'NumpadSubtract',\r\n  NumpadAdd = 'NumpadAdd',\r\n  NumpadEnter = 'NumpadEnter',\r\n  NumpadDecimal = 'NumpadDecimal',\r\n  Numpad0 = 'Numpad0',\r\n  Numpad1 = 'Numpad1',\r\n  Numpad2 = 'Numpad2',\r\n  Numpad3 = 'Numpad3',\r\n  Numpad4 = 'Numpad4',\r\n  Numpad5 = 'Numpad5',\r\n  Numpad6 = 'Numpad6',\r\n  Numpad7 = 'Numpad7',\r\n  Numpad8 = 'Numpad8',\r\n  Numpad9 = 'Numpad9',\r\n\r\n  ArrowUp = 'ArrowUp',\r\n  ArrowDown = 'ArrowDown',\r\n  ArrowLeft = 'ArrowLeft',\r\n  ArrowRight = 'ArrowRight',\r\n\r\n  Backquote = 'Backquote',\r\n  Minus = 'Minus',\r\n  Equal = 'Equal',\r\n  Backspace = 'Backspace',\r\n  BracketLeft = 'BracketLeft',\r\n  BracketRight = 'BracketRight',\r\n  Quote = 'Quote',\r\n  Backslash = 'Backslash',\r\n  Comma = 'Comma',\r\n  Period = 'Period',\r\n  Slash = 'Slash',\r\n\r\n  Enter = 'Enter',\r\n  ShiftLeft = 'ShiftLeft',\r\n  ShiftRight = 'ShiftRight',\r\n  CapsLock = 'CapsLock',\r\n  Tab = 'Tab',\r\n  ControlLeft = 'ControlLeft',\r\n  ControlRight = 'ControlRight',\r\n  MetaLeft = 'MetaLeft',\r\n  MetaRight = 'MetaRight',\r\n  AltLeft = 'AltLeft',\r\n  AltRight = 'AltRight'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Keys.ts"],"sourceRoot":""}