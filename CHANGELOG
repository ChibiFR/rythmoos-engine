v1.2.0:
  * You can now set the game's framerate. The game class uses its own loop making it able to
    choose between the animation frame (safer, 60fps), or the interval timing system (less
    accurate but more choices).
  * Added a reference to the game instance to all scenes and game objects, and a reference
    to the parent scene to all game objects.
  * The Renderer now contains an overridable method contextSettings() that allows you to specify
    the default properties of the renderer's context.
  * The Scene class does not extend the class Map anymore.
  * Added some helper functions to the State class (increment, decrement, reverse booleans...).
  * Fixed the Keyboard's lastKey properties which was a function but is now a getter.
  * [TODO]: Add a generic load() method to the Loader, add a way to load binary files as buffers.
  * [TODO]: Add a way to preload() assets (json for example), before loading the other assets. Making
            it easy to load JSON datas (that could contain all sprites URL for example), and then load
            the sprites from this, before the game starts.

v1.1.1:
  * Fixed the Mouse button up and movement properties. Add buttonUp properties.
  * Add a get() method to the Loader to make assets easier to get with one method.
  * Fixed some typos in the documentation.

v1.1.0:
  * The engine now comes with a virtual context making it easy to work with bitmap data,
    text metrics, image data and all that is possible to do with a context.
  * Mouse now contains the movementX and movementY properties, making it easy to work
    with point locks or with games that have a different resolution than the screen.
  * Time now contains the "second" property that returns the deltaTime in second. Useful
    for animations.
  * Fixed the keyboard prevent default visibility.
  * Updated documentation with game examples.

v1.0.0:
  * Bug fixes and improvements.
  * An example game was added to the documentation in the docs/examples directory.


v0.2.0:
  * Possibility to prevent the default action for keyboard's keys at any time in the game.
  * The Keyboard class now gives access to the last key pressed.
  * A new static class "State" that allows to save data and access it throughout anywhere in
    the game.

v0.1.0:
  * Initial version
